{
  "exercises": [
    {
      "id": "04-arrays-basics",
      "title": "Array Basics",
      "description": "Learn to create and manipulate arrays in JavaScript",
      "order": 4,
      "readme": "# Exercise 4: Array Basics\n\nArrays are one of the most fundamental data structures in JavaScript. Let's learn how to work with them!\n\n## Learning Objectives\n\n- Understand what arrays are and why they're useful\n- Create arrays using array literals\n- Access array elements using indices\n- Modify array elements\n- Use the length property\n\n## Instructions\n\nOpen the `exercise.js` file and complete the following functions:\n\n1. `createFruitArray()` - Return an array containing three fruit names\n2. `getFirstElement(arr)` - Return the first element of the given array\n3. `getLastElement(arr)` - Return the last element using the length property\n4. `addToEnd(arr, item)` - Add an item to the end of the array and return the array\n\n## Requirements\n\n- `createFruitArray()` must return an array with exactly 3 strings\n- `getFirstElement()` should work with any array\n- `getLastElement()` should work with arrays of any length\n- `addToEnd()` should modify the original array\n\n## Example\n\n```javascript\nconst fruits = createFruitArray();\nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\"]\n\ngetFirstElement(fruits); // \"apple\"\ngetLastElement(fruits); // \"orange\"\naddToEnd(fruits, \"grape\"); // [\"apple\", \"banana\", \"orange\", \"grape\"]\n```\n\n## Tips\n\n- Array indices start at 0 (the first element is at index 0)\n- Use `array.length` to get the number of elements\n- The last element is at index `array.length - 1`\n- The `push()` method adds elements to the end of an array\n\nGood luck! 🍎",
      "exercise_file": "// TODO: Create a function that returns an array of three fruits\n// The array should contain exactly 3 string elements\nfunction createFruitArray() {\n  // Your code here\n}\n\n// TODO: Create a function that returns the first element of an array\nfunction getFirstElement(arr) {\n  // Your code here\n}\n\n// TODO: Create a function that returns the last element of an array\n// Hint: use the length property\nfunction getLastElement(arr) {\n  // Your code here\n}\n\n// TODO: Create a function that adds an item to the end of an array\n// The function should return the modified array\nfunction addToEnd(arr, item) {\n  // Your code here\n}\n\nmodule.exports = {\n  createFruitArray,\n  getFirstElement,\n  getLastElement,\n  addToEnd\n};",
      "test_file": "const {\n  createFruitArray,\n  getFirstElement,\n  getLastElement,\n  addToEnd\n} = require('./exercise');\n\ndescribe('Array Basics Exercise', () => {\n  test('createFruitArray should return an array with 3 elements', () => {\n    const result = createFruitArray();\n    expect(Array.isArray(result)).toBe(true);\n    expect(result.length).toBe(3);\n  });\n\n  test('createFruitArray should contain only strings', () => {\n    const result = createFruitArray();\n    result.forEach(item => {\n      expect(typeof item).toBe('string');\n    });\n  });\n\n  test('getFirstElement should return the first element', () => {\n    expect(getFirstElement([1, 2, 3])).toBe(1);\n    expect(getFirstElement(['a', 'b', 'c'])).toBe('a');\n  });\n\n  test('getLastElement should return the last element', () => {\n    expect(getLastElement([1, 2, 3])).toBe(3);\n    expect(getLastElement(['x', 'y', 'z'])).toBe('z');\n  });\n\n  test('getLastElement should work with different array lengths', () => {\n    expect(getLastElement([1])).toBe(1);\n    expect(getLastElement([1, 2, 3, 4, 5])).toBe(5);\n  });\n\n  test('addToEnd should add an item to the end of the array', () => {\n    const arr = [1, 2, 3];\n    const result = addToEnd(arr, 4);\n    expect(result).toEqual([1, 2, 3, 4]);\n    expect(arr).toEqual([1, 2, 3, 4]);\n  });\n\n  test('addToEnd should return the modified array', () => {\n    const arr = ['a', 'b'];\n    const result = addToEnd(arr, 'c');\n    expect(result).toBe(arr);\n  });\n});",
      "solution_file": "// Solution for Array Basics exercise\n\nfunction createFruitArray() {\n  return ['apple', 'banana', 'orange'];\n}\n\nfunction getFirstElement(arr) {\n  return arr[0];\n}\n\nfunction getLastElement(arr) {\n  return arr[arr.length - 1];\n}\n\nfunction addToEnd(arr, item) {\n  arr.push(item);\n  return arr;\n}\n\nmodule.exports = {\n  createFruitArray,\n  getFirstElement,\n  getLastElement,\n  addToEnd\n};"
    },
    {
      "id": "05-conditionals",
      "title": "Conditional Statements",
      "description": "Learn to make decisions in your code with if/else statements",
      "order": 5,
      "readme": "# Exercise 5: Conditional Statements\n\nConditionals allow your code to make decisions and execute different code based on different conditions.\n\n## Learning Objectives\n\n- Understand how if/else statements work\n- Use comparison operators (===, !==, <, >, <=, >=)\n- Combine conditions with logical operators (&&, ||, !)\n- Write else if chains for multiple conditions\n- Use the ternary operator for simple conditions\n\n## Instructions\n\nOpen the `exercise.js` file and complete the following functions:\n\n1. `isAdult(age)` - Return true if age is 18 or older, false otherwise\n2. `getGrade(score)` - Return letter grade (A, B, C, D, F) based on score\n3. `canVote(age, isCitizen)` - Return true if person can vote (18+ AND citizen)\n4. `maxOfTwo(a, b)` - Return the larger of two numbers\n\n## Requirements\n\n- `isAdult()`: 18 and above returns true, below 18 returns false\n- `getGrade()`: A (90-100), B (80-89), C (70-79), D (60-69), F (0-59)\n- `canVote()`: Must be 18+ AND a citizen to return true\n- `maxOfTwo()`: Return the larger number, or either if equal\n\n## Example\n\n```javascript\nisAdult(25); // true\nisAdult(15); // false\n\ngetGrade(95); // \"A\"\ngetGrade(75); // \"C\"\n\ncanVote(20, true); // true\ncanVote(20, false); // false\ncanVote(16, true); // false\n\nmaxOfTwo(10, 5); // 10\nmaxOfTwo(3, 8); // 8\n```\n\n## Tips\n\n- Use `===` for equality comparison (not `=` or `==`)\n- The `&&` operator means AND (both conditions must be true)\n- The `||` operator means OR (at least one condition must be true)\n- Use `else if` for multiple conditions in sequence\n- Consider using a ternary operator for simple true/false returns\n\nGood luck! 🎯",
      "exercise_file": "// TODO: Create a function that checks if someone is an adult (18 or older)\nfunction isAdult(age) {\n  // Your code here\n}\n\n// TODO: Create a function that returns a letter grade based on a score\n// A: 90-100, B: 80-89, C: 70-79, D: 60-69, F: 0-59\nfunction getGrade(score) {\n  // Your code here\n}\n\n// TODO: Create a function that checks if someone can vote\n// They must be 18 or older AND be a citizen\nfunction canVote(age, isCitizen) {\n  // Your code here\n}\n\n// TODO: Create a function that returns the larger of two numbers\nfunction maxOfTwo(a, b) {\n  // Your code here\n}\n\nmodule.exports = {\n  isAdult,\n  getGrade,\n  canVote,\n  maxOfTwo\n};",
      "test_file": "const {\n  isAdult,\n  getGrade,\n  canVote,\n  maxOfTwo\n} = require('./exercise');\n\ndescribe('Conditional Statements Exercise', () => {\n  describe('isAdult', () => {\n    test('should return true for age 18 and above', () => {\n      expect(isAdult(18)).toBe(true);\n      expect(isAdult(25)).toBe(true);\n      expect(isAdult(65)).toBe(true);\n    });\n\n    test('should return false for age below 18', () => {\n      expect(isAdult(17)).toBe(false);\n      expect(isAdult(10)).toBe(false);\n      expect(isAdult(0)).toBe(false);\n    });\n  });\n\n  describe('getGrade', () => {\n    test('should return \"A\" for scores 90-100', () => {\n      expect(getGrade(90)).toBe('A');\n      expect(getGrade(95)).toBe('A');\n      expect(getGrade(100)).toBe('A');\n    });\n\n    test('should return \"B\" for scores 80-89', () => {\n      expect(getGrade(80)).toBe('B');\n      expect(getGrade(85)).toBe('B');\n      expect(getGrade(89)).toBe('B');\n    });\n\n    test('should return \"C\" for scores 70-79', () => {\n      expect(getGrade(70)).toBe('C');\n      expect(getGrade(75)).toBe('C');\n    });\n\n    test('should return \"D\" for scores 60-69', () => {\n      expect(getGrade(60)).toBe('D');\n      expect(getGrade(65)).toBe('D');\n    });\n\n    test('should return \"F\" for scores below 60', () => {\n      expect(getGrade(59)).toBe('F');\n      expect(getGrade(30)).toBe('F');\n      expect(getGrade(0)).toBe('F');\n    });\n  });\n\n  describe('canVote', () => {\n    test('should return true when 18+ and citizen', () => {\n      expect(canVote(18, true)).toBe(true);\n      expect(canVote(25, true)).toBe(true);\n    });\n\n    test('should return false when under 18', () => {\n      expect(canVote(17, true)).toBe(false);\n      expect(canVote(16, false)).toBe(false);\n    });\n\n    test('should return false when not a citizen', () => {\n      expect(canVote(25, false)).toBe(false);\n      expect(canVote(18, false)).toBe(false);\n    });\n  });\n\n  describe('maxOfTwo', () => {\n    test('should return the larger number', () => {\n      expect(maxOfTwo(10, 5)).toBe(10);\n      expect(maxOfTwo(3, 8)).toBe(8);\n    });\n\n    test('should handle negative numbers', () => {\n      expect(maxOfTwo(-5, -10)).toBe(-5);\n      expect(maxOfTwo(-3, 2)).toBe(2);\n    });\n\n    test('should handle equal numbers', () => {\n      const result = maxOfTwo(5, 5);\n      expect(result).toBe(5);\n    });\n  });\n});",
      "solution_file": "// Solution for Conditional Statements exercise\n\nfunction isAdult(age) {\n  return age >= 18;\n}\n\nfunction getGrade(score) {\n  if (score >= 90) {\n    return 'A';\n  } else if (score >= 80) {\n    return 'B';\n  } else if (score >= 70) {\n    return 'C';\n  } else if (score >= 60) {\n    return 'D';\n  } else {\n    return 'F';\n  }\n}\n\nfunction canVote(age, isCitizen) {\n  return age >= 18 && isCitizen;\n}\n\nfunction maxOfTwo(a, b) {\n  return a >= b ? a : b;\n  // Alternative: if (a >= b) { return a; } else { return b; }\n}\n\nmodule.exports = {\n  isAdult,\n  getGrade,\n  canVote,\n  maxOfTwo\n};"
    }
  ]
}
